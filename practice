# # def fact(a):
# #     if a==0 or a==1:
# #         return 1
# #     else:
# #         b=a*fact(a-1)
# #         return b
# # ans=fact(5)
# # print(ans)
# ----------

# a=int(input("enter the num:"))
# fact=1
# if a<1:
#     print("enter the currect num:")
# else:
#     for i in range(1,a+1):
#         fact=fact*i
#     print(fact)

# -----------------
#fibonacci sequence
# import sys
# a=int(sys.argv[1])
# t1=0
# t2=1
# count=0
# temp=0
# if a==0:
#     print(t1)
# elif (a==1):
#     print(t2)
# else:
#     while (count<a):
#         print(t1,end=" ")
#         temp=t1+t2
#         t1=t2
#         t2=temp
#         count+=1
# --------------------

#armstrong number
# a=int(input("enter the num:"))
# b=len(str(a))
# c=a
# count=0
# while c>0:
#     temp=c%10
#     count+=temp**b
#     c=c//10
# if(count==a):
#     print("given number is the armsstrong number")
# else:
#     print("given number is the not armstrong num")
# ----------------

#sum of N numbers
# a=int(input("enter the num:"))
# sum=0
# for i in range(1,a+1):
#     sum=sum+i
# print(sum)
# ------------

#find factors
# a=int(input("enter the num:"))
# for i in range(1,a+1):
#     if a%i==0:
#         print(i,end=" ")
#     else:
#         continue
#-------------

#find prime factors
a=int(input("enter the num:"))
for i in range(1,a+1):
    for j in range(2,i):
        if i%j==0:
            break
        else:
            print(j,end=" ")
            
            
#palindrome or not
# n=input("enter the any input:")
# def ispalindrome():
#     return n==n[::-1]
# ans=ispalindrome()
# if ans:
#     print("given string is palindrome")
# else:
#     print("given string is not a palindrome")
#------------

# gcd using recursion
# first_input=int(input("enter the first number:"))
# second_input=int(input("enter the second number:"))
# def gcd(a,b):
#     if b==0:
#         return a
#     else:
#         return gcd (b,a%b)
# ans=gcd(first_input,second_input)
# print(ans)
#--------------

# gcd using loop
# first_input=int(input("enter the first number:"))
# second_input=int(input("enter the second number:"))
# def gcdloop(a,b):
#     if a>b:
#         temp=a
#     else:
#         temp=b
#     for i in range(1,temp+1):
#         if a%i==0 and b%i==0:
#             gcd=i
#     return gcd
# ans=gcdloop(first_input,second_input)
# print(ans)
#--------------    

#multiplication table
# a=2
# def tables():
#     for i in range(1,11):
#         print(a,'x',i,'=',a*i)
# tables()
#--------------

#bubble sort
# def bubblesort(arr):
#     n=len(arr)
#     for i in range(n):
#         for j in range(0,n-i-1):
#             if arr[j]>arr[j+1]:
#                 arr[j],arr[j+1]=arr[j+1],arr[j]

# l=int(input("enter the num of elements:"))
# arr=[]
# for i in range(l):
#     arr.append(int(input("enter the element:")))
# bubblesort(arr)
# print("sorted array is:")
# for i in range(len(arr)):
#     print(arr[i],end=" ")
#------------

#selection sort
# def selectionsort(arr):
#     n=len(arr)
#     for i in range(n):
#         min=i
#         for k in range(i+1,n):
#             if arr[k]<arr[min]:
#                 min=k
#         arr[i],arr[min]=arr[min],arr[i]
# l=int(input("enter the num of elements:"))
# arr=[]
# for i in range(l):
#     arr.append(int(input("enter the element:")))
# selectionsort(arr)
# print("sorted array is:")
# for i in range(len(arr)):
#     print(arr[i],end=" ")
#----------------

#insertion sort
# def insertionsort(arr):
#     n=len(arr)
#     for i in range(1,n):
#         temp=arr[i]
#         j=i-1
#         while j>=0 and temp<arr[j]:
#             arr[j+1]=arr[j]
#             j-=1
#         arr[j+1]=temp
#     return arr
# l=int(input("enter the num of elements:"))
# arr=[]
# for i in range(l):
#     arr.append(int(input("enter the element:")))
# insertionsort(arr)
# print("sorted array is:")
# for i in range(len(arr)):
#     print(arr[i],end=" ")
#-------------

# linearsearch
# def linearsearch(arr,key):
#     for i in range(len(arr)):
#         if key==arr[i]:
#             return i
#     return -1
# l=int(input("enter the num of elements:"))
# arr=[]
# for i in range(l):
#     arr.append(int(input("enter the element:")))
# key=int(input("enter the key:"))
# result=linearsearch(arr,key)

# if result==-1:
#     print("element is not found")
# else:
#     print("element is found is at index:",result)
#---------------------------


#binarysearch with recursion
# def binarysearch(arr,lb,ub,key):
#     if ub>=lb:
#         mid=(lb+ub)//2
#         if arr[mid]==key:
#             return mid
#         elif arr[mid]<key:
#             return binarysearch(arr,mid+1,ub,key)
#         else:
#             return binarysearch(arr,lb,mid-1,key)
#     else:
#         return -1
# l=int(input("enter the num of elements:"))
# arr=[]
# for i in range(l):
#     arr.append(int(input("enter the element:")))
# key=int(input("enter the key:"))
# result=binarysearch(arr,0,len(arr)-1,key)

# if result==-1:
#     print("element is not found")
# else:
#     print("element is found is at index:",result)
#-----------------------------

# binarysearch with iteration
# def binarysearch(arr,lb,ub,key):
#     while ub>=lb:
#         mid=(lb+ub)//2
#         if arr[mid]==key:
#             return mid
#         elif arr[mid]<key:
#             lb=mid+1
#         else:
#             ub=mid-1
#     else:
#         return -1
# l=int(input("enter the num of elements:"))
# arr=[]
# for i in range(l):
#     arr.append(int(input("enter the element:")))
# key=int(input("enter the key:"))
# result=binarysearch(arr,0,len(arr)-1,key)

# if result==-1:
#     print("element is not found")
# else:
#     print("element is found is at index:",result)
#-------------------------

# import sys
# def armstrong():
#     n=int(sys.argv[1])
#     sum=0
#     b=len(str(n))
#     while n!=0:
#         a=n%10
#         sum=sum+(a**b)
#         n=n//10
#         print("armstrong ans:")
#         return sum
# a=armstrong()
# print(a)
#----------------------

#read word by word
# file1=open("text1.txt",'r')
# file2=open("newtext.txt",'w')
# temp=file1.readlines()
# for line in temp:
#     for word in line.strip("\n").split():
#         print(file2.write(word+"\n"))
#---------------------

#read char by char
# import sys
# file1=open(sys.argv[1],'r')
# file2=open(sys.argv[2],'w')
# temp=file1.readlines()
# for line in temp:
#     for word in line.strip("\n").split():
#         for char in word:
#             print(file2.write(char+" "))
#-----------------------------


